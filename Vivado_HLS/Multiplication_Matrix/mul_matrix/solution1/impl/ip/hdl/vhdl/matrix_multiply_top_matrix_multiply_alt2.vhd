-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiply_top_matrix_multiply_alt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_multiply_top_matrix_multiply_alt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st14_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal indvar_flatten1_reg_111 : STD_LOGIC_VECTOR (4 downto 0);
    signal Col_assign_2_reg_122 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal Row_assign_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_reg_155 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten1_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_61 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_184_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_fu_222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_14_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_14_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_mid2_v_fu_250_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_i_mid2_v_reg_417 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_mid2_fu_288_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_mid2_reg_424 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_mid2_fu_296_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_mid2_reg_429 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_fu_304_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_456 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_456_pp0_iter2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_456_pp0_iter3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_456_pp0_iter4 : STD_LOGIC_VECTOR (4 downto 0);
    signal C_addr_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_C_addr_reg_471_pp0_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_C_addr_reg_471_pp0_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_C_addr_reg_471_pp0_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_C_addr_reg_471_pp0_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_C_addr_reg_471_pp0_iter10 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_mult_reg_482_pp0_iter6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_mult_reg_482_pp0_iter7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_mult_reg_482_pp0_iter8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_mult_reg_482_pp0_iter9 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_mult_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_mult_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_ce0 : STD_LOGIC;
    signal sum_mult_ce1 : STD_LOGIC;
    signal sum_mult_we1 : STD_LOGIC;
    signal sum_mult_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Col_assign_2_phi_fu_126_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal Row_assign_phi_fu_148_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_cast_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_190_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_13_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Row_assign_mid_fu_202_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_mid_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_276_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_op_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_327_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_334_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_i_mid2_cast_fu_324_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_354_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_mid2_cast_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_i4_cast_fu_375_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_2 : STD_LOGIC;
    signal ap_sig_395 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_229 : BOOLEAN;

    component matrix_multiply_top_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_top_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_top_matrix_multiply_alt2_sum_mult IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sum_mult_U : component matrix_multiply_top_matrix_multiply_alt2_sum_mult
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_mult_address0,
        ce0 => sum_mult_ce0,
        q0 => sum_mult_q0,
        address1 => ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter9,
        ce1 => sum_mult_ce1,
        we1 => sum_mult_we1,
        d1 => sum_mult_d1);

    matrix_multiply_top_fadd_32ns_32ns_32_5_full_dsp_U0 : component matrix_multiply_top_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_mult_q0,
        din1 => mult_reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    matrix_multiply_top_fmul_32ns_32ns_32_4_max_dsp_U1 : component matrix_multiply_top_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q0,
        din1 => B_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten1_fu_178_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    Col_assign_2_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten1_reg_400 = ap_const_lv1_0))) then 
                Col_assign_2_reg_122 <= tmp_i_i_mid2_v_reg_417;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Col_assign_2_reg_122 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    Col_assign_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then 
                Col_assign_reg_155 <= c_fu_304_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Col_assign_reg_155 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    Row_assign_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten1_reg_400 = ap_const_lv1_0))) then 
                Row_assign_reg_144 <= tmp_1_mid2_reg_429;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                Row_assign_reg_144 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_111 <= indvar_flatten_next1_fu_184_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten1_reg_111 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_133 <= indvar_flatten_next_fu_316_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter4 = ap_const_lv1_0)) then
                C_addr_reg_471 <= tmp_24_cast_fu_395_p1(4 - 1 downto 0);
                mult_reg_482 <= grp_fu_172_p2;
                sum_mult_addr_reg_476 <= tmp_24_cast_fu_395_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then
                Col_assign_mid2_reg_424 <= Col_assign_mid2_fu_288_p3;
                tmp_mid2_14_reg_413 <= tmp_mid2_14_fu_242_p3;
                tmp_mid2_reg_409 <= tmp_mid2_fu_222_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_C_addr_reg_471_pp0_iter10 <= ap_reg_ppstg_C_addr_reg_471_pp0_iter9;
                ap_reg_ppstg_C_addr_reg_471_pp0_iter6 <= C_addr_reg_471;
                ap_reg_ppstg_C_addr_reg_471_pp0_iter7 <= ap_reg_ppstg_C_addr_reg_471_pp0_iter6;
                ap_reg_ppstg_C_addr_reg_471_pp0_iter8 <= ap_reg_ppstg_C_addr_reg_471_pp0_iter7;
                ap_reg_ppstg_C_addr_reg_471_pp0_iter9 <= ap_reg_ppstg_C_addr_reg_471_pp0_iter8;
                ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter1;
                ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter2;
                ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter3;
                ap_reg_ppstg_mult_reg_482_pp0_iter6 <= mult_reg_482;
                ap_reg_ppstg_mult_reg_482_pp0_iter7 <= ap_reg_ppstg_mult_reg_482_pp0_iter6;
                ap_reg_ppstg_mult_reg_482_pp0_iter8 <= ap_reg_ppstg_mult_reg_482_pp0_iter7;
                ap_reg_ppstg_mult_reg_482_pp0_iter9 <= ap_reg_ppstg_mult_reg_482_pp0_iter8;
                ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter6 <= sum_mult_addr_reg_476;
                ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter7 <= ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter6;
                ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter8 <= ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter7;
                ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter9 <= ap_reg_ppstg_sum_mult_addr_reg_476_pp0_iter8;
                ap_reg_ppstg_tmp_17_reg_456_pp0_iter2 <= tmp_17_reg_456;
                ap_reg_ppstg_tmp_17_reg_456_pp0_iter3 <= ap_reg_ppstg_tmp_17_reg_456_pp0_iter2;
                ap_reg_ppstg_tmp_17_reg_456_pp0_iter4 <= ap_reg_ppstg_tmp_17_reg_456_pp0_iter3;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter10 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter2 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter1;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter3 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter2;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter4 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter3;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter5 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter4;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter6 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter5;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter7 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter6;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter8 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter7;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9 <= ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter8;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter10 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter2 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter1;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter3 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter2;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter4 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter3;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter5 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter4;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter6 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter5;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter7 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter6;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter8 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter7;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9 <= ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten1_reg_400_pp0_iter1 <= exitcond_flatten1_reg_400;
                ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter1 <= tmp_mid2_14_reg_413;
                ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter1 <= tmp_mid2_reg_409;
                exitcond_flatten1_reg_400 <= exitcond_flatten1_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten1_reg_400 = ap_const_lv1_0))) then
                tmp_17_reg_456 <= tmp_17_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten1_fu_178_p2 = ap_const_lv1_0))) then
                tmp_1_mid2_reg_429 <= tmp_1_mid2_fu_296_p3;
                tmp_i_i_mid2_v_reg_417 <= tmp_i_i_mid2_v_fu_250_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9)) then
                tmp_4_reg_493 <= grp_fu_166_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten1_fu_178_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten1_fu_178_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten1_fu_178_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_2;
                end if;
            when ap_ST_st14_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= tmp_22_cast_fu_370_p1(4 - 1 downto 0);

    A_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_23_cast_fu_384_p1(4 - 1 downto 0);

    B_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= ap_reg_ppstg_C_addr_reg_471_pp0_iter10;

    C_ce0_assign_proc : process(ap_reg_ppiten_pp0_it11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= tmp_4_reg_493;

    C_we0_assign_proc : process(ap_reg_ppiten_pp0_it11, ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter10, ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter10)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter10) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter10))))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Col_assign_2_phi_fu_126_p4_assign_proc : process(Col_assign_2_reg_122, exitcond_flatten1_reg_400, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_i_i_mid2_v_reg_417)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten1_reg_400 = ap_const_lv1_0))) then 
            Col_assign_2_phi_fu_126_p4 <= tmp_i_i_mid2_v_reg_417;
        else 
            Col_assign_2_phi_fu_126_p4 <= Col_assign_2_reg_122;
        end if; 
    end process;

    Col_assign_mid2_fu_288_p3 <= 
        ap_const_lv2_0 when (tmp_13_fu_282_p2(0) = '1') else 
        Col_assign_reg_155;
    Row_assign_mid_fu_202_p3 <= 
        ap_const_lv2_0 when (exitcond_flatten_fu_196_p2(0) = '1') else 
        Row_assign_phi_fu_148_p4;

    Row_assign_phi_fu_148_p4_assign_proc : process(Row_assign_reg_144, exitcond_flatten1_reg_400, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_1_mid2_reg_429)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten1_reg_400 = ap_const_lv1_0))) then 
            Row_assign_phi_fu_148_p4 <= tmp_1_mid2_reg_429;
        else 
            Row_assign_phi_fu_148_p4 <= Row_assign_reg_144;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_229_assign_proc : process(ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9, ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9)
    begin
                ap_sig_229 <= ((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9));
    end process;


    ap_sig_395_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_395 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_61 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_61)
    begin
        if (ap_sig_61) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_2_assign_proc : process(ap_sig_395)
    begin
        if (ap_sig_395) then 
            ap_sig_cseq_ST_st14_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_304_p2 <= std_logic_vector(unsigned(Col_assign_mid2_fu_288_p3) + unsigned(ap_const_lv2_1));
    exitcond_flatten1_fu_178_p2 <= "1" when (indvar_flatten1_reg_111 = ap_const_lv5_1B) else "0";
    exitcond_flatten_fu_196_p2 <= "1" when (indvar_flatten_reg_133 = ap_const_lv4_9) else "0";
    exitcond_fu_264_p2 <= "1" when (Col_assign_reg_155 = ap_const_lv2_3) else "0";
    exitcond_mid_fu_270_p2 <= (exitcond_fu_264_p2 and not_exitcond_flatten_fu_258_p2);
    indvar_flatten_next1_fu_184_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_111) + unsigned(ap_const_lv5_1));
    indvar_flatten_next_fu_316_p3 <= 
        ap_const_lv4_1 when (exitcond_flatten_fu_196_p2(0) = '1') else 
        indvar_flatten_op_fu_310_p2;
    indvar_flatten_op_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv4_1));
    k_fu_190_p2 <= std_logic_vector(unsigned(Col_assign_2_phi_fu_126_p4) + unsigned(ap_const_lv2_1));
    not_exitcond_flatten_fu_258_p2 <= (exitcond_flatten_fu_196_p2 xor ap_const_lv1_1);
    p_shl1_cast_fu_334_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_327_p3),5));
    p_shl_cast_fu_354_p1 <= std_logic_vector(resize(unsigned(tmp_fu_347_p3),5));
    r_fu_276_p2 <= std_logic_vector(unsigned(Row_assign_mid_fu_202_p3) + unsigned(ap_const_lv2_1));
    sum_mult_address0 <= tmp_24_cast_fu_395_p1(4 - 1 downto 0);

    sum_mult_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            sum_mult_ce0 <= ap_const_logic_1;
        else 
            sum_mult_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_ce1_assign_proc : process(ap_reg_ppiten_pp0_it10, ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9, ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9))))) then 
            sum_mult_ce1 <= ap_const_logic_1;
        else 
            sum_mult_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_d1_assign_proc : process(ap_reg_ppiten_pp0_it10, ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9, ap_reg_ppstg_mult_reg_482_pp0_iter9, grp_fu_166_p2, ap_sig_229)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it10)) then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9))) then 
                sum_mult_d1 <= ap_reg_ppstg_mult_reg_482_pp0_iter9;
            elsif (ap_sig_229) then 
                sum_mult_d1 <= grp_fu_166_p2;
            else 
                sum_mult_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_mult_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_mult_we1_assign_proc : process(ap_reg_ppiten_pp0_it10, ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9, ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_14_reg_413_pp0_iter9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_mid2_reg_409_pp0_iter9))))) then 
            sum_mult_we1 <= ap_const_logic_1;
        else 
            sum_mult_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_216_p2 <= "1" when (Col_assign_2_phi_fu_126_p4 = ap_const_lv2_0) else "0";
    tmp_12_fu_338_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_334_p1) - unsigned(tmp_i_i_mid2_cast_fu_324_p1));
    tmp_13_fu_282_p2 <= (exitcond_mid_fu_270_p2 or exitcond_flatten_fu_196_p2);
    tmp_14_fu_358_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_354_p1) - unsigned(tmp_1_mid2_cast_fu_344_p1));
    tmp_15_fu_364_p2 <= std_logic_vector(unsigned(tmp_i_i_mid2_cast_fu_324_p1) + unsigned(tmp_14_fu_358_p2));
    tmp_16_fu_378_p2 <= std_logic_vector(unsigned(tmp_i_i4_cast_fu_375_p1) + unsigned(tmp_12_fu_338_p2));
    tmp_17_fu_389_p2 <= std_logic_vector(unsigned(tmp_i_i4_cast_fu_375_p1) + unsigned(tmp_14_fu_358_p2));
    tmp_1_mid2_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_1_mid2_reg_429),5));
    tmp_1_mid2_fu_296_p3 <= 
        r_fu_276_p2 when (exitcond_mid_fu_270_p2(0) = '1') else 
        Row_assign_mid_fu_202_p3;
    tmp_22_cast_fu_370_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_364_p2),64));
        tmp_23_cast_fu_384_p1 <= std_logic_vector(resize(signed(tmp_16_fu_378_p2),64));

    tmp_24_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_17_reg_456_pp0_iter4),64));
    tmp_2_fu_236_p2 <= "1" when (Col_assign_2_phi_fu_126_p4 = ap_const_lv2_2) else "0";
    tmp_fu_347_p3 <= (tmp_1_mid2_reg_429 & ap_const_lv2_0);
    tmp_i_i4_cast_fu_375_p1 <= std_logic_vector(resize(unsigned(Col_assign_mid2_reg_424),5));
    tmp_i_i_mid2_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(tmp_i_i_mid2_v_reg_417),5));
    tmp_i_i_mid2_v_fu_250_p3 <= 
        k_fu_190_p2 when (exitcond_flatten_fu_196_p2(0) = '1') else 
        Col_assign_2_phi_fu_126_p4;
    tmp_mid1_13_fu_230_p2 <= "1" when (k_fu_190_p2 = ap_const_lv2_2) else "0";
    tmp_mid1_fu_210_p2 <= "1" when (k_fu_190_p2 = ap_const_lv2_0) else "0";
    tmp_mid2_14_fu_242_p3 <= 
        tmp_mid1_13_fu_230_p2 when (exitcond_flatten_fu_196_p2(0) = '1') else 
        tmp_2_fu_236_p2;
    tmp_mid2_fu_222_p3 <= 
        tmp_mid1_fu_210_p2 when (exitcond_flatten_fu_196_p2(0) = '1') else 
        tmp3_fu_216_p2;
    tmp_s_fu_327_p3 <= (tmp_i_i_mid2_v_reg_417 & ap_const_lv2_0);
end behav;
